import * as shell from 'shelljs';
import * as commandLineArgs from 'command-line-args';
import { parse } from 'dotenv';
import { readdirSync, readFileSync } from 'fs';

//rover subgraph publish Keadex-Einaudi@current --name experience --routing-url http://localhost:3001/ --schema ./src/_autogenerated/schema.gql

//e.g. yarn run publish-graph --name company --port 3002

const optionDefinitions = [
  { name: 'name', alias: 'n', type: String },
  { name: 'variant', alias: 'v', type: String, defaultValue: 'current' },
  { name: 'port', alias: 'p', type: String },
  { name: 'path', alias: 'P', type: String, defaultValue: '/graphql' },
  { name: 'all', alias: 'a', type: Boolean, defaultValue: false },
];

const options = commandLineArgs(optionDefinitions);

if (options['all']) {
  readdirSync('./apps/').forEach((microservice) => {
    console.log(`Publishing subgraph '${microservice}'`);
    const msOptions = parse(
      readFileSync(`./apps/${microservice}/.env`, 'utf8'),
    );
    options['name'] = microservice;
    options['port'] = msOptions[`${microservice.toUpperCase()}_MS_TCP_PORT`];
    options['path'] = msOptions[`GRAPHQL_ROUTING_URL`] ?? '/graphql';
    console.log(options);
    shell.exec(getRoverPublishCommand(options));
  });
} else {
  console.log(options);
  shell.exec(getRoverPublishCommand(options));
}

function getRoverPublishCommand(options): string {
  return `rover subgraph publish Keadex-Einaudi@${options['variant']} --name ${options['name']} --routing-url http://localhost:${options['port']}${options['path']} --schema ./apps/${options['name']}/src/_autogenerated/schema.gql`;
}
